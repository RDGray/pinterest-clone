{"version":3,"sources":["all.js","main.js","modal-and-pin.js","modal.js","pin_script.js"],"names":["msg","document","querySelector","icon_click","toggleBotMenu","classList","contains","remove","add","add_pin_modal","addEventListener","pin_image_blob","event","target","files","test","type","reader","FileReader","onload","new_image","Image","src","result","modals_pin","appendChild","style","display","getBoundingClientRect","width","parentElement","height","opacity","readAsDataURL","value","users_data","author","board","title","description","destination","img_blob","pin_size","console","log"],"mappings":"AAAA,aCAA,IAAAA,IAAAC,SAAAC,cAAA,iBACAC,WAAAF,SAAAC,cAAA,uBAEA,SAAAE,gBACAJ,IAAAK,UAAAC,SAAA,YACAN,IAAAK,UAAAE,OAAA,WACAP,IAAAK,UAAAG,IAAA,YAEAR,IAAAK,UAAAE,OAAA,UACAP,IAAAK,UAAAG,IAAA,YCTA,IAAAC,cAAAR,SAAAC,cAAA,SAEAD,SACAC,cAAA,kCACAQ,iBAAA,SAAA,eCJA,IAAAC,eAAA,KAIAV,SAAAC,cAAA,eAAAQ,iBAAA,UAAA,SAAAE,GACA,GAAAA,EAAAC,OAAAC,OAAAF,EAAAC,OAAAC,MAAA,IAEA,WAAAC,KAAAH,EAAAC,OAAAC,MAAA,GAAAE,MAAA,CACA,IAAAC,EAAA,IAAAC,WAEAD,EAAAE,OAAA,WACA,IAAAC,EAAA,IAAAC,MAEAD,EAAAE,IAAAL,EAAAM,OACAZ,eAAAM,EAAAM,OAEAH,EAAAD,OAAA,WACA,IAAAK,EAAAvB,SAAAC,cACA,+BAGAkB,EAAAf,UAAAG,IAAA,iBAEAP,SACAC,cAAA,2BACAuB,YAAAL,GAEAnB,SAAAC,cAAA,uBAAAwB,MAAAC,QAAA,OAEAH,EAAAE,MAAAC,QAAA,SAGAP,EAAAQ,wBAAAC,MACAT,EAAAU,cAAAF,wBAAAC,OACAT,EAAAQ,wBAAAG,OACAX,EAAAU,cAAAF,wBAAAG,UAEAX,EAAAf,UAAAE,OAAA,iBACAa,EAAAf,UAAAG,IAAA,mBAGAgB,EAAAE,MAAAM,QAAA,IAIAf,EAAAgB,cAAArB,EAAAC,OAAAC,MAAA,IAIAb,SAAAC,cAAA,eAAAgC,MAAA,MAKAjC,SAAAC,cAAA,cAAAQ,iBAAA,SAAA,WACA,IAAAyB,EAAA,CACAC,OAAA,OACAC,MAAA,UACAC,MAAArC,SAAAC,cAAA,cAAAgC,MACAK,YAAAtC,SAAAC,cAAA,oBAAAgC,MACAM,YAAAvC,SAAAC,cAAA,oBAAAgC,MACAO,SAAA9B,eACA+B,SAAAzC,SAAAC,cAAA,aAAAgC,OAGAS,QAAAC,IAAAT,MAEAQ,QAAAC,IAAA3C,SAAAC,cAAA,aAAAgC,OCjEAjC,SAAAC,cAAA,YAAAQ,iBAAA,UAAA,SAAAE,GACA,GAAAA,EAAAC,OAAAC,OAAAF,EAAAC,OAAAC,MAAA,IAEA,WAAAC,KAAAH,EAAAC,OAAAC,MAAA,GAAAE,MAAA,CACA,IAAAC,EAAA,IAAAC,WAEAD,EAAAE,OAAA,WACAlB,SAAAC,cAAA,gBAAAoB,IAAAL,EAAAM,QAGAN,EAAAgB,cAAArB,EAAAC,OAAAC,MAAA,IAIAb,SAAAC,cAAA,YAAAgC,MAAA","file":"all.js","sourcesContent":[null,"let msg = document.querySelector(\".add-pin__msg\");\r\nlet icon_click = document.querySelector(\".add-pin__image-btn\");\r\n\r\nfunction toggleBotMenu() {\r\n  if (msg.classList.contains(\"menuOff\")) {\r\n    msg.classList.remove(\"menuOff\");\r\n    msg.classList.add(\"menuOn\");\r\n  } else {\r\n    msg.classList.remove(\"menuOn\");\r\n    msg.classList.add(\"menuOff\");\r\n  }\r\n}\r\n","const add_pin_modal = document.querySelector(\".main\");\r\n\r\ndocument\r\n  .querySelector(\".add-pin__upload-pin-container\")\r\n  .addEventListener(\"click\", () => {});\r\n","let pin_image_blob = null;\r\n\r\n//----------------add image functionality for image add modal----------------\\\\\r\n\r\ndocument.querySelector(\"#upload_img\").addEventListener(\"change\", (event) => {\r\n  if (event.target.files && event.target.files[0]) {\r\n    //check the type of the input to load\r\n    if (/image\\/*/.test(event.target.files[0].type)) {\r\n      const reader = new FileReader();\r\n      //where the image will be sent to\r\n      reader.onload = function () {\r\n        const new_image = new Image();\r\n\r\n        new_image.src = reader.result;\r\n        pin_image_blob = reader.result;\r\n\r\n        new_image.onload = function () {\r\n          const modals_pin = document.querySelector(\r\n            \".left-side__image-container\"\r\n          );\r\n\r\n          new_image.classList.add(\"pin_max_width\");\r\n\r\n          document\r\n            .querySelector(\".left-side__image-inner\")\r\n            .appendChild(new_image);\r\n\r\n          document.querySelector(\"#upload_image_label\").style.display = \"none\";\r\n\r\n          modals_pin.style.display = \"block\";\r\n\r\n          if (\r\n            new_image.getBoundingClientRect().width <\r\n              new_image.parentElement.getBoundingClientRect().width ||\r\n            new_image.getBoundingClientRect().height <\r\n              new_image.parentElement.getBoundingClientRect().height\r\n          ) {\r\n            new_image.classList.remove(\"pin_max_width\");\r\n            new_image.classList.add(\"pin_max_height\");\r\n          }\r\n\r\n          modals_pin.style.opacity = 1;\r\n        };\r\n      };\r\n\r\n      reader.readAsDataURL(event.target.files[0]);\r\n    }\r\n  }\r\n\r\n  document.querySelector(\"#upload_img\").value = \"\";\r\n});\r\n\r\n// Save the data info\r\n\r\ndocument.querySelector(\".add__save\").addEventListener(\"click\", () => {\r\n  const users_data = {\r\n    author: \"Jack\",\r\n    board: \"default\",\r\n    title: document.querySelector(\"#pin_title\").value,\r\n    description: document.querySelector(\"#pin_description\").value,\r\n    destination: document.querySelector(\"#pin_destination\").value,\r\n    img_blob: pin_image_blob,\r\n    pin_size: document.querySelector(\"#pin_size\").value,\r\n  };\r\n  //create_pin(user_data);\r\n  console.log(users_data);\r\n});\r\nconsole.log(document.querySelector(\"#pin_size\").value);\r\n","//----------------add image functionality----------------\\\\\r\n\r\ndocument.querySelector(\"#picture\").addEventListener(\"change\", (event) => {\r\n  if (event.target.files && event.target.files[0]) {\r\n    //check the type of the input to load\r\n    if (/image\\/*/.test(event.target.files[0].type)) {\r\n      const reader = new FileReader();\r\n      //where the image will be sent to\r\n      reader.onload = function () {\r\n        document.querySelector(\".card__image\").src = reader.result;\r\n      };\r\n\r\n      reader.readAsDataURL(event.target.files[0]);\r\n    }\r\n  }\r\n\r\n  document.querySelector(\"#picture\").value = \"\";\r\n});\r\n"]}